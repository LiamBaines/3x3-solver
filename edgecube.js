const cube = {
  state: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], // permutation - 
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], // 0 = white on U/D, or F/B for middle layer
  maps: {
    p: {
      U: [3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11],
      u: [1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11],
      D: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 8],
      d: [0, 1, 2, 3, 4, 5, 6, 7, 11, 8, 9, 10],
      R: [0, 1, 2, 7, 4, 5, 3, 11, 8, 9, 10, 6],
      r: [0, 1, 2, 6, 4, 5, 11, 3, 8, 9, 10, 7],
      L: [0, 5, 2, 3, 1, 9, 6, 7, 8, 4, 10, 11],
      l: [0, 4, 2, 3, 9, 1, 6, 7, 8, 5, 10, 11],
      F: [4, 1, 2, 3, 8, 5, 6, 0, 7, 9, 10, 11],
      f: [7, 1, 2, 3, 0, 5, 6, 8, 4, 9, 10, 11],
      B: [0, 1, 6, 3, 4, 10, 2, 7, 8, 9, 5, 11],
      b: [0, 1, 5, 3, 4, 10, 2, 7, 8, 9, 6, 11]
    },
    o: {
      U: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      u: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      D: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      d: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      R: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      r: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      L: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      l: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      F: [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0],
      f: [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0],
      B: [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0],
      b: [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0]
    }
  },
  turn([p1, o1], dir) {
    let p = this.maps.p[dir];
    let o = this.maps.o[dir];
    let p2 = p.map(x => p1[x]);
    let o2 = o1.map((x, j) => (x + o[j] % 2));
    let o3 = p.map(x => o2[x]);
    return [p2, o3]
  }
}

module.exports = cube;